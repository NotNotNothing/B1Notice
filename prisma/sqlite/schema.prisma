// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Stock {
  id          String       @id @default(cuid())
  symbol      String
  name        String
  market      String
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  monitors    Monitor[]
  kdjs        Kdj[]
  bbis        Bbi[]
  quotes      Quote[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([userId, symbol])
  @@index([userId])
  @@index([symbol])
}

model Monitor {
  id            String         @id @default(cuid())
  stockId       String
  stock         Stock          @relation(fields: [stockId], references: [id])
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  type          String        // PRICE, VOLUME, CHANGE_PERCENT, KDJ_J
  condition     String        // ABOVE, BELOW
  threshold     Float         // 阈值
  isActive      Boolean       @default(true)
  lastNotifiedAt DateTime?
  notifications Notification[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  monitorId String
  monitor   Monitor  @relation(fields: [monitorId], references: [id])
  message   String
  status    String   // PENDING, SENT, FAILED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quote {
  id            String   @id @default(cuid())
  stockId       String
  stock         Stock    @relation(fields: [stockId], references: [id])
  price         Float
  volume        Float
  changePercent Float
  dailyKdj      Kdj?    @relation("DailyKdj", fields: [dailyKdjId], references: [id])
  dailyKdjId    String?
  weeklyKdj     Kdj?    @relation("WeeklyKdj", fields: [weeklyKdjId], references: [id])
  weeklyKdjId   String?
  bbi           Bbi?    @relation(fields: [bbiId], references: [id])
  bbiId         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([stockId])
  @@index([stockId])
  @@index([createdAt])
}

model Kdj {
  id            String       @id @default(cuid())
  stockId       String
  stock         Stock        @relation(fields: [stockId], references: [id])
  k             Float
  d             Float
  j             Float
  type          String      // DAILY or WEEKLY
  dailyQuotes   Quote[] @relation("DailyKdj")
  weeklyQuotes  Quote[] @relation("WeeklyKdj")
  date          DateTime     @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([stockId, type], map: "stockId_type")
  @@index([stockId, date])
  @@index([type])
}

model Bbi {
  id                          String   @id @default(cuid())
  stockId                     String
  stock                       Stock    @relation(fields: [stockId], references: [id])
  bbi                         Float
  ma3                         Float
  ma6                         Float
  ma12                        Float
  ma24                        Float
  aboveBBIConsecutiveDays     Boolean  @default(false)
  belowBBIConsecutiveDays     Boolean  @default(false)
  aboveBBIConsecutiveDaysCount Int     @default(0)
  belowBBIConsecutiveDaysCount Int     @default(0)
  quotes                      Quote[]
  date                        DateTime @default(now())
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@unique([stockId])
  @@index([stockId, date])
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  name          String?
  password      String
  role          String    @default("USER")  // USER, ADMIN
  pushDeerKey   String?   // PushDeer 推送 key
  stocks        Stock[]
  monitors      Monitor[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
